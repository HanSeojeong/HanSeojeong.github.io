{"version":3,"sources":["components/Todo.jsx","App.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","Title","InputWrapper","Input","input","Button","button","TodoList","ul","TodoContent","span","TodoItem","li","isDone","css","DeleteButton","TodoComponent","useState","nextId","setNextId","id","text","todoList","setTodoList","setText","handleAdd","newTodoList","value","placeholder","onChange","e","target","onKeyPress","key","onClick","map","type","checked","todo","handleToggle","filter","handleDelete","App","Todo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAqEMA,EAAYC,IAAOC,IAAV,qQAcTC,EAAQF,IAAOC,IAAV,yFAKLE,EAAeH,IAAOC,IAAV,+EAKZG,EAAQJ,IAAOK,MAAV,mMAYLC,EAASN,IAAOO,OAAV,4JASNC,EAAWR,IAAOS,GAAV,iGAMRC,EAAcV,IAAOW,KAAV,0BACXC,EAAWZ,IAAOa,GAAV,mRAcV,qBAAGC,QAEHC,YADM,iJAIFL,MAMFM,EAAehB,IAAOO,OAAV,gDAIHU,EApJO,WACpB,MAA4BC,mBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAgCF,mBAAS,CACvC,CAAEG,GAAI,EAAGC,KAAM,gBAAOR,QAAQ,GAC9B,CAAEO,GAAI,EAAGC,KAAM,iBAAQR,QAAQ,KAFjC,mBAAOS,EAAP,KAAiBC,EAAjB,KAIA,EAAwBN,mBAAS,IAAjC,mBAAOI,EAAP,KAAaG,EAAb,KAKMC,EAAY,WAChB,IAAMC,EAAW,sBAAOJ,GAAP,CAAiB,CAAEF,GAAIF,EAAQG,OAAMR,QAAQ,KAC9DU,EAAYG,GACZF,EAAQ,IACRL,EAAUD,EAAS,IAuBrB,OACE,mCACE,eAACpB,EAAD,WACE,cAACG,EAAD,wCACA,eAACC,EAAD,WACE,cAACC,EAAD,CACEwB,MAAON,EACPO,YAAY,qDACZC,SAtCc,SAACC,GACvBN,EAAQM,EAAEC,OAAOJ,QAsCTK,WA9Ba,SAACF,GACR,UAAVA,EAAEG,KACJR,OA8BI,cAACpB,EAAD,CAAQ6B,QAAST,EAAjB,kBAEF,cAAClB,EAAD,UACGe,EAASa,KAAI,gBAAGf,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMR,EAAb,EAAaA,OAAb,OACZ,eAACF,EAAD,CAAmBE,OAAQA,EAA3B,UACE,kCACE,uBAAOuB,KAAK,WAAWP,SAAU,SAACC,GAAD,OA3B1B,SAACA,EAAGV,GACvB,IAAMP,EAASiB,EAAEC,OAAOM,QAElBX,EAAcJ,EAASa,KAAI,SAACG,GAAD,OAC/BA,EAAKlB,KAAOA,EAAZ,2BAAsBkB,GAAtB,IAA4BzB,WAAWyB,KAGzCf,EAAYG,GAoBwCa,CAAaT,EAAGV,MACxD,cAACX,EAAD,UAAcY,OAEhB,cAACN,EAAD,CAAcmB,QAAS,kBApCd,SAACd,GAEpB,IAAMM,EAAcJ,EAASkB,QAAO,SAACF,GAAD,OAAUA,EAAKlB,KAAOA,KAC1DG,EAAYG,GAiC2Be,CAAarB,IAA1C,4BALaA,cC9CZsB,MARf,WACE,OACE,mCACE,cAACC,EAAD,OCQSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.41bdcca5.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nconst TodoComponent = () => {\r\n  const [nextId, setNextId] = useState(3);\r\n  const [todoList, setTodoList] = useState([\r\n    { id: 1, text: \"할 일\", isDone: false },\r\n    { id: 2, text: \"할 일2\", isDone: false },\r\n  ]);\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleInputText = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n  const handleAdd = () => {\r\n    const newTodoList = [...todoList, { id: nextId, text, isDone: false }];\r\n    setTodoList(newTodoList);\r\n    setText(\"\");\r\n    setNextId(nextId + 1);\r\n  };\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      handleAdd();\r\n    }\r\n  };\r\n  const handleDelete = (id) => {\r\n    // console.log(id);\r\n    const newTodoList = todoList.filter((todo) => todo.id !== id);\r\n    setTodoList(newTodoList);\r\n  };\r\n\r\n  const handleToggle = (e, id) => {\r\n    const isDone = e.target.checked;\r\n    // console.log(e.target.checked, id);\r\n    const newTodoList = todoList.map((todo) =>\r\n      todo.id === id ? { ...todo, isDone } : todo\r\n    );\r\n    // console.log(newTodoList);\r\n    setTodoList(newTodoList);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Title>일정 관리</Title>\r\n        <InputWrapper>\r\n          <Input\r\n            value={text}\r\n            placeholder=\"할 일을 입력하세요\"\r\n            onChange={handleInputText}\r\n            onKeyPress={handleKeyPress}\r\n          />\r\n          <Button onClick={handleAdd}>+</Button>\r\n        </InputWrapper>\r\n        <TodoList>\r\n          {todoList.map(({ id, text, isDone }) => (\r\n            <TodoItem key={id} isDone={isDone}>\r\n              <label>\r\n                <input type=\"checkbox\" onChange={(e) => handleToggle(e, id)} />\r\n                <TodoContent>{text}</TodoContent>\r\n              </label>\r\n              <DeleteButton onClick={() => handleDelete(id)}>삭제</DeleteButton>\r\n            </TodoItem>\r\n          ))}\r\n        </TodoList>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  left: 25%;\r\n  top: 10px;\r\n  display: flex;\r\n  text-align: center;\r\n  flex-direction: column;\r\n  width: 600px;\r\n  height: 500px;\r\n  border: grey solid 1px;\r\n  @media (max-width: 500px) {\r\n    width: 300px;\r\n  }\r\n`;\r\nconst Title = styled.div`\r\n  padding: 20px;\r\n  background: #ff4b4b;\r\n  color: #ffd0d0;\r\n`;\r\nconst InputWrapper = styled.div`\r\n  display: flex;\r\n  height: 40px;\r\n  width: 100%;\r\n`;\r\nconst Input = styled.input`\r\n  background: #ffbdbd;\r\n  color: white;\r\n  padding: 5px;\r\n  flex: 1;\r\n  line-height: 5;\r\n  border: none;\r\n  outline: none;\r\n  &::placeholder {\r\n    color: #fff;\r\n  }\r\n`;\r\nconst Button = styled.button`\r\n  margin: 0;\r\n  width: 50px;\r\n  padding: 10px;\r\n  border: none;\r\n  background: #ffe3e3;\r\n  color: #ff4b4b;\r\n  cursor: pointer;\r\n`;\r\nconst TodoList = styled.ul`\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  overflow: auto;\r\n`;\r\nconst TodoContent = styled.span``;\r\nconst TodoItem = styled.li`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 10px;\r\n  background-color: #ccc;\r\n  color: black;\r\n  & + & {\r\n    border-top: 1px solid #ffbdbd;\r\n  }\r\n  &:hover {\r\n    background-color: grey;\r\n  }\r\n\r\n  ${({ isDone }) =>\r\n    isDone &&\r\n    css`\r\n      background-color: grey;\r\n      color: black;\r\n      ${TodoContent} {\r\n        text-decoration: line-through;\r\n      }\r\n    `}\r\n`;\r\n\r\nconst DeleteButton = styled.button`\r\n  cursor: pointer;\r\n`;\r\n\r\nexport default TodoComponent;\r\n","import Todo from \"./components/Todo\";\nfunction App() {\n  return (\n    <>\n      <Todo />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}